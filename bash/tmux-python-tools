#!/bin/bash
# ~/.local/bin/tmux-python-tools
# Usage: tmux-python-tools <tool> [args...]

set -e

TOOL="$1"
shift

case "$TOOL" in
    "ipython")
        echo "üêç Starting ptipython with data science imports..."
        if command -v ptipython >/dev/null 2>&1; then
            # Create a startup script for ptipython with data science imports
            cat > /tmp/ptipython_startup.py << 'EOF'
import numpy as np
import pandas as pd

# Try to set sixel backend for terminal plotting
try:
    import matplotlib
    matplotlib.use('module://pyplotsixel')
    import matplotlib.pyplot as plt
    print("üìä matplotlib with sixel backend loaded as 'plt'")
    
    # Create clean show function for sixel backend
    _original_show = plt.show
    def show_clean(*args, **kwargs):
        result = _original_show(*args, **kwargs)
        plt.close('all')  # Clean up after showing
        return result
    plt.show = show_clean
    print("üßπ Clean show function enabled (auto-closes figures)")
    
except ImportError:
    try:
        import matplotlib
        import matplotlib.pyplot as plt
        print("‚ö†Ô∏è  pyplotsixel not found - using default backend")
        print("   Install with: pip install pyplotsixel (for terminal plots)")
        print("üìä matplotlib.pyplot loaded as 'plt'")
    except ImportError:
        print("‚ö†Ô∏è  matplotlib not found - install with: pip install matplotlib")
        plt = None
        matplotlib = None

# Set default background color
if plt is not None and matplotlib is not None:
    matplotlib.rcParams['figure.facecolor'] = '#eeeeee'
    matplotlib.rcParams['axes.facecolor'] = '#eeeeee'
    print("üé® Default background color set to #eeeeee")

try:
    import seaborn as sns
    print("üìä seaborn loaded as 'sns'")
except ImportError:
    print("‚ö†Ô∏è  seaborn not found - install with: pip install seaborn")
    sns = None

try:
    import scipy
    print("üìä scipy loaded")
except ImportError:
    print("‚ö†Ô∏è  scipy not found - install with: pip install scipy")

print("üìä Data science environment ready!")
print("Available: numpy (np), pandas (pd), matplotlib.pyplot (plt), seaborn (sns)")
print("‚îÄ" * 60)
EOF
            exec ptipython -i /tmp/ptipython_startup.py "$@"
        else
            echo "‚ùå ptipython not found. Install with: pip install ptipython"
            echo "üêç Starting Python3 with basic data science imports..."
            python3 -c "
import numpy as np
import pandas as pd
print('üìä Basic libraries loaded: numpy (np), pandas (pd)')
print('Install ptipython for better experience: pip install ptipython')
print('‚îÄ' * 60)
import code
code.interact(local=locals())
"
            exec bash
        fi
        ;;
    
    "ptpython")
        echo "üêç Starting ptpython with data science imports..."
        if command -v ptpython >/dev/null 2>&1; then
            python3 -c "
import numpy as np
import pandas as pd

# Try to set sixel backend for terminal plotting
try:
    import matplotlib
    matplotlib.use('module://pyplotsixel')
    import matplotlib.pyplot as plt
    print('üìä matplotlib with sixel backend loaded as \\'plt\\'')
    
    # Create clean show function for sixel backend
    _original_show = plt.show
    def show_clean(*args, **kwargs):
        result = _original_show(*args, **kwargs)
        plt.close('all')  # Clean up after showing
        return result
    plt.show = show_clean
    print('üßπ Clean show function enabled (auto-closes figures)')
    
except ImportError:
    try:
        import matplotlib
        import matplotlib.pyplot as plt
        print('‚ö†Ô∏è  pyplotsixel not found - using default backend')
        print('   Install with: pip install pyplotsixel (for terminal plots)')
        print('üìä matplotlib.pyplot loaded as \\'plt\\'')
    except ImportError:
        print('‚ö†Ô∏è  matplotlib not found - install with: pip install matplotlib')
        plt = None
        matplotlib = None

# Set default background color
if plt is not None and matplotlib is not None:
    matplotlib.rcParams['figure.facecolor'] = '#eeeeee'
    matplotlib.rcParams['axes.facecolor'] = '#eeeeee'
    print('üé® Default background color set to #eeeeee')

try:
    import seaborn as sns
    print('üìä seaborn loaded as \\'sns\\'')
except ImportError:
    print('‚ö†Ô∏è  seaborn not found - install with: pip install seaborn')
    sns = None

try:
    import scipy
    print('üìä scipy loaded')
except ImportError:
    print('‚ö†Ô∏è  scipy not found - install with: pip install scipy')

print('üìä Data science environment ready!')
print('Available: numpy (np), pandas (pd), matplotlib.pyplot (plt), seaborn (sns)')
print('‚îÄ' * 60)

# Start ptpython with all variables in scope
from ptpython.repl import embed
embed(globals(), locals())
"
        else
            echo "‚ùå ptpython not found. Install with: pip install ptpython"
            echo "üêç Starting Python3 with basic data science imports..."
            python3 -c "
import numpy as np
import pandas as pd
print('üìä Basic libraries loaded: numpy (np), pandas (pd)')
print('Install ptpython for better experience: pip install ptpython')
print('‚îÄ' * 60)
import code
code.interact(local=locals())
"
            exec bash
        fi
        ;;
    
    "pytest")
        echo "üß™ Running tests..."
        if command -v pytest >/dev/null 2>&1; then
            pytest -v --tb=short "$@"
            echo -e "\n‚úÖ Tests completed. Press Enter to continue..."
            read
        else
            echo "‚ùå Pytest not found. Install with: pip install pytest"
            echo "Press Enter to continue..."
            read
        fi
        exec bash
        ;;
    
    "pytest-watch")
        if command -v ptw >/dev/null 2>&1; then
            echo "üîÑ Starting pytest watch mode..."
            exec ptw "$@"
        else
            echo "‚ùå pytest-watch not found. Install with: pip install pytest-watch"
            echo "Press Enter to continue..."
            read
            exec bash
        fi
        ;;
    
    "black")
        echo "üé® Formatting with Black..."
        if command -v black >/dev/null 2>&1; then
            black . "$@"
            echo "‚úÖ Black formatting complete"
        else
            echo "‚ùå Black not found. Install with: pip install black"
        fi
        echo -e "\nPress Enter to continue..."
        read
        exec bash
        ;;
    
    "ruff")
        echo "üîç Running Ruff linter..."
        if command -v ruff >/dev/null 2>&1; then
            ruff check . "$@"
        else
            echo "‚ùå Ruff not found. Install with: pip install ruff"
        fi
        echo -e "\nPress Enter to continue..."
        read
        exec bash
        ;;
    
    "pdb")
        echo "üêõ Python Debugger"
        echo "Usage examples:"
        echo "  python -m pdb script.py"
        echo "  Add 'import pdb; pdb.set_trace()' to your code"
        echo ""
        exec python3 "$@"
        ;;
    
    "poetry")
        if command -v poetry >/dev/null 2>&1; then
            echo "üì¶ Activating Poetry environment..."
            exec poetry shell
        else
            echo "‚ùå Poetry not found. Install from https://python-poetry.org"
            exec bash
        fi
        ;;
    
    "install-deps")
        echo "üì¶ Installing dependencies..."
        if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "‚úÖ Requirements installed"
        elif [ -f pyproject.toml ]; then
            pip install -e .
            echo "‚úÖ Project installed in development mode"
        else
            echo "‚ùå No requirements.txt or pyproject.toml found"
        fi
        echo -e "\nPress Enter to continue..."
        read
        exec bash
        ;;
    
    *)
        echo "‚ùå Unknown tool: $TOOL"
        echo "Available tools: ipython, ptpython, pytest, pytest-watch, black, ruff, pdb, poetry, install-deps"
        echo "Note: 'ipython' uses ptipython, 'ptpython' uses ptpython"
        exec bash
        ;;
esac
