# tmux.conf

# Free the original Ctrl-b prefix keybinding
unbind C-b

# Set the prefix as C-a
set -g prefix C-a

# Ensure that we can send C-a to other apps
bind C-a send-prefix

# Reload the file with Prefix r
unbind r
bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Reloaded tmux conf"

# Mouse support
set -g mouse on

# Enable vi keys
set -w -g mode-keys vi

# Set the default terminal mode to 256color mode
set -g default-terminal "tmux-256color"

 # Override terminal so it displays 24bit RGB color
set -ga terminal-overrides ",*256col*:RGB"
set -as terminal-overrides ",foot*:Tc"

set -as terminal-features ",foot*:RGB"
set -as terminal-features ",gnome*:RGB"

# activate sixel in the tmux
set -as terminal-features ",foot*:sixel"
# foot terminal optimization
set -as terminal-overrides ",foot*:Ms=\\E]52;c;%p1%s\\7"
set -as terminal-overrides ",foot*:Cs=\\E]12;%p1%s\\7"

# set the history limit
set -g history-limit 10000

# Set the delay between prefix and command
set -s escape-time 1

# Set the case index for windows to 1 instead of 0
set -g base-index 1

# Colors for pane borders
# set -w -g pane-border-style fg=green, bg=black
# set -w -g pane-active-border-style fg=black, bg=yellow

# Pane border style: single, double, heavy, simple, number
set -w -g pane-border-lines heavy

# Add indicators for two-pane setup
set -g pane-border-indicators colour
# Add status to panes
set -g pane-border-status off

# Active pane normal, other shaded out
# set -g window-style fg=color240,bg=color235

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# set for clear screen
bind C-l send-keys 'C-l'

# Split panes with | and -
unbind % # Split vertically
unbind '"' # Split horizontally
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Pane resizing pane with prefix H,J,K,L
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# change binding shortcut for copy-mode
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
bind-key -T copy-mode-vi 'C-v' send -X rectangle-toggle
bind -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Escape send -X cancel
bind-key / copy-mode \; send-key ?

# Detect the display server protocol and set clipboard commands
if-shell '[ "$XDG_SESSION_TYPE" = "wayland" ]' \
    'set -g @copy_command "wl-copy"; \
     set -g @paste_command "wl-paste -n"' \
    'set -g @copy_command "xclip -sel clip -i"; \
     set -g @paste_command "xclip -sel clip -o"'

# Prefix Ctrl-C takes what's in the buffer and sends it to system clipboard
# via the command stored in the variable.
# bind C-c run 'tmux save-buffer - | #{@copy_command}'

# y in copy mode takes selection and sends it to system clipboard via the
# command stored in the variable.
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "#{@copy_command}"

# Prefix Ctrl-v fills tmux buffer from system clipboard, then
# pastes from buffer into tmux window
bind C-v run-shell '#{@paste_command} | tmux load-buffer - \; paste-buffer'

# popup menu setting
bind O display-popup -d "~/" \
                          -x C -y C -w 50% -h 50% \
                          -e "POPUP=true" -E "zsh"
# popup menu
 bind e  \
   display-menu -T "Quick Menu" -x C -y C \
     "New Window" n "new-window" \
     "Horizontal Split" - "split-window" \
     "Vertical Split"  | "split-window -h" \
     "Close Pane" x "kill-pane"
##
# plugins

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'odedlaz/tmux-onedark-theme'
set -g @plugin 'wfxr/tmux-power'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
# customization
# set -g @onedark_date_format "%d-%b"
set -g @tmux_power_date_format '%d-%b'
set -g @tmux_power_time_format '%H:%M'
set -g @tmux_power_theme 'everforest'
#  Development Shortcuts
bind-key g new-window -n "lazygit" -c "#{pane_current_path}" "lazygit"
bind-key h new-window -n "htop" "htop"

# Safty measures
set -g default-command "${SHELL}"
set -g renumber-windows on
set -g allow-rename off
# some performance optimization
set -g focus-events on
set -g aggressive-resize on
set -sg repeat-time 600
# Python development

# Quick Python environments and tools
bind-key P display-menu -T "Python Tools" -x C -y C \
    "IPython REPL" i "new-window -n 'ipython' -c '#{pane_current_path}' 'ipython'" \
    "Jupyter Lab" j "new-window -n 'jupyter' -c '#{pane_current_path}' 'jupyter lab'" \
    "Python REPL" p "new-window -n 'ptpython' -c '#{pane_current_path}' 'ptpython'" \
    "Pytest" t "split-window -v -c '#{pane_current_path}' 'pytest -v --tb=short'" \
    "Black Format" b "run-shell 'cd #{pane_current_path} && black .'"
# Better environment switching
bind-key E command-prompt -p 'Python env (conda/venv):' \
    'new-window -n "env-%%1" -c "#{pane_current_path}" \
    "if [ -d \"%%1\" ]; then source %%1/bin/activate && $$SHELL; \
     elif conda info --envs | grep -q \"%%1\"; then conda activate %%1 && $$SHELL; \
     else echo \"Environment not found\" && sleep 2; fi"'

# Quick virtual environment creation
bind-key V command-prompt -p 'New venv name:' \
    'new-window -n "setup-%%1" -c "#{pane_current_path}" \
    "python -m venv %%1 && source %%1/bin/activate && pip install --upgrade pip setuptools wheel && $$SHELL"'

# Enhanced git shortcuts for data projects
bind-key G display-menu -T "Git + Data" -x C -y C \
    "Git Status" s "split-window -v -c '#{pane_current_path}' 'git status && read'" \
    "LazyGit" g "new-window -n 'lazygit' -c '#{pane_current_path}' 'lazygit'" \
    "DVC Status" d "split-window -v -c '#{pane_current_path}' 'dvc status && read'" \
    "DVC Push" p "split-window -v -c '#{pane_current_path}' 'dvc push'" \
    "DVC Pull" u "split-window -v -c '#{pane_current_path}' 'dvc pull'" \
    "Git LFS Status" l "split-window -v -c '#{pane_current_path}' 'git lfs status && read'" \
    "Commit + DVC" c "command-prompt -p 'Commit message:' 'run-shell \"cd #{pane_current_path} && git add . && dvc add data/ && git commit -m \\\"%1\\\" && dvc push\"'"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
