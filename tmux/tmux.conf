
# tmux.conf

# Free the original Ctrl-b prefix keybinding
unbind C-b

# Set the prefix as C-a
set -g prefix C-a

# Ensure that we can send C-a to other apps
bind C-a send-prefix

# Reload the file with Prefix r
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded tmux conf"

# Mouse support
set -g mouse on

# Enable vi keys
set -w -g mode-keys vi

# Set the default terminal mode to 256color mode
set -g default-terminal "tmux-256color"

 # Override terminal so it displays 24bit RGB color
set -ga terminal-overrides ",*256col*:RGB"
set -as terminal-overrides ",foot*:Tc"

set -as terminal-features ",foot*:RGB"
set -as terminal-features ",gnome*:RGB"

# activate sixel in the tmux
set -as terminal-features ",foot*:sixel"
# foot terminal optimization
set -as terminal-overrides ",foot*:Ms=\\E]52;c;%p1%s\\7"
set -as terminal-overrides ",foot*:Cs=\\E]12;%p1%s\\7"

# set the history limit
set -g history-limit 10000

# Set the delay between prefix and command
set -s escape-time 1

# Set the case index for windows to 1 instead of 0
set -g base-index 1

# Colors for pane borders
# set -w -g pane-border-style fg=green, bg=black
# set -w -g pane-active-border-style fg=black, bg=yellow

# Pane border style: single, double, heavy, simple, number
set -w -g pane-border-lines heavy

# Add indicators for two-pane setup
set -g pane-border-indicators colour
# Add status to panes
set -g pane-border-status off

# Active pane normal, other shaded out
# set -g window-style fg=color240,bg=color235

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# set for clear screen
bind C-l send-keys 'C-l'

# Split panes with | and -
unbind % # Split vertically
unbind '"' # Split horizontally
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Pane resizing pane with prefix H,J,K,L
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# change binding shortcut for copy-mode
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
bind-key -T copy-mode-vi 'C-v' send -X rectangle-toggle
bind -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Escape send -X cancel
bind-key / copy-mode \; send-key ?

# Detect the display server protocol and set clipboard commands
if-shell '[ "$XDG_SESSION_TYPE" = "wayland" ]' \
    'set -g @copy_command "wl-copy"; \
     set -g @paste_command "wl-paste -n"' \
    'set -g @copy_command "xclip -sel clip -i"; \
     set -g @paste_command "xclip -sel clip -o"'

# Prefix Ctrl-C takes what's in the buffer and sends it to system clipboard
# via the command stored in the variable.
# bind C-c run 'tmux save-buffer - | #{@copy_command}'

# y in copy mode takes selection and sends it to system clipboard via the
# command stored in the variable.
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "#{@copy_command}"

# Prefix Ctrl-v fills tmux buffer from system clipboard, then
# pastes from buffer into tmux window
bind C-v run-shell '#{@paste_command} | tmux load-buffer - \; paste-buffer'

# popup menu setting
bind O display-popup -d "~/" \
                          -x C -y C -w 50% -h 50% \
                          -e "POPUP=true" -E "zsh"
# popup menu
 bind e  \
   display-menu -T "Quick Menu" -x C -y C \
     "New Window" n "new-window" \
     "Horizontal Split" - "split-window" \
     "Vertical Split"  | "split-window -h" \
     "Close Pane" x "kill-pane"
##
# plugins

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
#I set -g @plugin 'odedlaz/tmux-onedark-theme'
set -g @plugin 'wfxr/tmux-power'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
# customization
# set -g @onedark_date_format "%d-%b"
set -g @tmux_power_date_format '%d-%b'
set -g @tmux_power_time_format '%H:%M'
set -g @tmux_power_theme 'everforest'
#  Development Shortcuts
bind-key g new-window -n "lazygit" -c "#{pane_current_path}" "lazygit"
bind-key h new-window -n "htop" "htop"

# Safty measures
set -g default-command "${SHELL}"
set -g renumber-windows on
set -g allow-rename off
# some performance optimization
set -g focus-events on
set -g aggressive-resize on
set -sg repeat-time 600

# rescurret settings
  # for vim
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'jupyter-smart jupyter-log-monitor duckdb ptpython ptipython'
#Session management options

# Session management menu (safer version)
bind-key S display-menu -T "Session Management" -x C -y C \
    "Save Session (Safe)" s "run-shell '~/.local/bin/tmux-safe-save'" \
    "Restore Last Session" r "run-shell '~/.local/bin/tmux-fix-last && ~/.config/tmux/plugins/tmux-resurrect/scripts/restore.sh'" \
    "List Saved Sessions" l "display-popup -d '#{pane_current_path}' -x C -y C -w 70% -h 50% 'ls -la ~/.config/local/share/tmux/resurrect/ 2>/dev/null | tail -10 && echo \"\" && echo \"Press Escape to close\" && read -t 30 -n 1 2>/dev/null || true'"

# Manual session management (safer shortcuts)
bind-key C-s run-shell '~/.local/bin/tmux-safe-save && tmux display-message "Session saved safely!"'
bind-key C-r run-shell '~/.local/bin/tmux-fix-last && ~/.config/tmux/plugins/tmux-resurrect/scripts/restore.sh && tmux display-message "Session restored!"'

# Update your named session saver to use safe save too
bind-key N command-prompt -p 'Session name:' 'run-shell "~/.local/bin/tmux-safe-save && ~/.local/bin/tmux-save-named-session %%1"'
# Interactive session restorer - makes named session restoration super easy
bind-key R display-popup -d '#{pane_current_path}' -x C -y C -w 70% -h 60% '~/.local/bin/tmux-session-restorer'
# Optional: Session cleanup helper
bind-key X display-popup -d '#{pane_current_path}' -x C -y C -w 65% -h 50% '~/.local/bin/tmux-session-cleanup'
#Python development

# Quick Python environments and tools
bind-key P display-menu -T "Python Tools" -x C -y C \
    "IPython REPL" i "new-window -n 'ipython' -c '#{pane_current_path}' 'ipython'" \
    "Ptpython REPL" p "new-window -n 'ptpython' -c '#{pane_current_path}' 'ptpython'" \
    "" \
    "Pytest Tests" t "split-window -v -c '#{pane_current_path}' 'pytest -v --tb=short'" \
    "Pytest Watch" w "split-window -v -c '#{pane_current_path}' 'ptw'" \
    "Black Format" b "run-shell 'cd #{pane_current_path} && black . && echo \"Black formatting complete\"'" \
    "Python Debugger" d "split-window -v -c '#{pane_current_path}' 'python -m pdb'"
# Jupyter Tools
bind-key J display-menu -T "Jupyter Tools" -x C -y C \
    "Auto Jupyter (Smart Port)" a "run-shell '~/.local/bin/tmux-jupyter-auto'" \
    "Custom Port Jupyter" c "command-prompt -p 'Jupyter port:' 'run-shell \"~/.local/bin/jupyter-port %%1\"'" \
    "List All Instances" l "display-popup -d '#{pane_current_path}' -x C -y C -w 80% -h 60% 'jupyter-smart ls && echo \"\" && echo \"Press Escape or q to close\" && read -t 60 -n 1 2>/dev/null || true'" \
    "Stop All Instances" s "display-popup -d '#{pane_current_path}' -x C -y C -w 60% -h 50% '~/.local/bin/tmux-jupyter-stop-all'"

# Dedicated Virtual Environment Management Menu
bind-key V display-menu -T "Virtual Environments" -x C -y C \
    "Project Environment" p "send-keys 'vp' Enter" \
    "Activate Environment" a "send-keys 'va' Enter" \
    "Create Environment" c "command-prompt -p 'Name:,Type (ds/de/ml/basic):' 'send-keys \"vc %%1 %%2\" Enter'" \
    "Sync Requirements" s "send-keys 'vs' Enter" \
    "Remove Environment" r "command-prompt -p 'Environment to remove:' 'send-keys \"vr %%1\" Enter'" \
    "" \
    "List Environments" l "send-keys 'vl' Enter" \
    "Environment Info" i "send-keys 'cache-stats' Enter" \
    "Project Info" o "send-keys 'project-info' Enter" \
    "Clear Cache" x "send-keys 'clear-cache' Enter" \
    "Help" h "send-keys 'vh' Enter"

# Enhanced git shortcuts for data projects
bind-key G display-menu -T "Git + Data Science Workflow" -x C -y C \
    "LazyGit (Full UI)" g "new-window -n 'lazygit' -c '#{pane_current_path}' 'lazygit'" \
    "Data Science Status" s "send-keys 'gstds' Enter" \
    "Interactive Commit" c "send-keys 'gci' Enter" \
    "Git Log (Detailed)" l "send-keys 'git lgd' Enter" \
    "Git Diff (Delta)" f "split-window -v -c '#{pane_current_path}' 'git diff | delta && read'" \
    "" \
    "Start Experiment" e "command-prompt -p 'Experiment name:' 'send-keys \"git exp-start %%1\" Enter'" \
    "List Experiments" x "send-keys 'git exp-list' Enter" \
    "Repository Info" i "split-window -v -c '#{pane_current_path}' 'git info && read'" \
    "" \
    "DVC Status" v "send-keys 'git dvc-status' Enter" \
    "DVC Push All" p "split-window -v -c '#{pane_current_path}' 'git dvc-push-all'" \
    "DVC Pull All" u "split-window -v -c '#{pane_current_path}' 'git dvc-pull-all'" \
    "" \
    "Clean Notebooks" n "send-keys 'git clean-notebooks' Enter" \
    "Quick Commit" q "command-prompt -p 'Quick commit message:' 'send-keys \"git commit -m \\\"%%1\\\"\" Enter'" \
    "Push to Origin" P "send-keys 'git push' Enter" \
    "Pull from Origin" U "send-keys 'git pull' Enter"
# Environment-aware workspace layouts
unbind W
bind-key W display-menu -T "Workspace" -x C -y C \
    "ETL Development" 1 "send-keys 'vp' Enter \; run-shell 'sleep 3' \; run-shell '~/.config/tmux/layouts/etl_layout.sh'" \
    "Data Analysis" 2 "send-keys 'vp' Enter \; run-shell 'sleep 3' \; run-shell '~/.config/tmux/layouts/analysis_layout.sh'" \
    "" \
    "Project Info" i "send-keys 'project-info' Enter"


# Bind Ctrl-b y to auto-copy from  to ❯ using wl-copy
bind-key y run-shell "tmux capture-pane -p -J | awk '{lines[NR]=$0} END { count=0; for(i=NR;i>=1;i--) if(lines[i] ~ /❯/) { count++; if(count==2) start=i } for(i=start;i<=NR;i++) { if(lines[i] ~ //) { end=i; break } } for(i=start;i<end;i++) print lines[i] }' | wl-copy"
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
