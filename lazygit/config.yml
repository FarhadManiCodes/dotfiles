# Lazygit Configuration - Optimized for Your Data Engineering Setup
# Location: ~/.config/lazygit/config.yml

gui:
  # Theme matching your One Dark setup
  theme:
    lightTheme: false
    # These colors match your vim/terminal One Dark theme
    activeBorderColor: ['#61afef', 'bold']      # Blue accent (matches your vim)
    inactiveBorderColor: ['#3e4451']            # Muted gray
    optionsTextColor: ['#e06c75']               # Red for options
    selectedLineBgColor: ['#2c323c']            # Slightly lighter bg for selection
    selectedRangeBgColor: ['#2c323c']           # Same for ranges
    cherryPickedCommitBgColor: ['#c678dd']      # Purple for cherry-picked
    cherryPickedCommitFgColor: ['#ffffff']      # White text
    unstagedChangesColor: ['#e06c75']           # Red for unstaged
    defaultFgColor: ['#abb2bf']                 # Default One Dark foreground

  # Layout settings optimized for your workflow
  sidePanelWidth: 0.3333                        # Good balance for data files
  expandFocusedSidePanel: false                 # Keep consistent layout
  mainPanelSplitMode: 'flexible'                # Better for diff viewing
  splitDiff: 'auto'                             # Auto-split for staged/unstaged

  # Display settings
  showFileTree: true                            # Tree view for complex data projects
  showCommandLog: true                          # Useful for debugging git commands
  showBottomLine: true                          # Keep shortcuts visible
  showRandomTip: false                          # Turn off tips (you know git well)

  # Commit display
  commitLength:
    show: true

  # Time format
  timeFormat: '02 Jan 06 15:04 MST'
  shortTimeFormat: '15:04'

# Git-specific settings optimized for your workflow
git:
  # Paging with delta (which you already use)
  paging:
    colorArg: always
    pager: 'delta --dark --paging=never --line-numbers --navigate'
    useConfig: false

  # Commit settings for better data science commits
  commit:
    signOff: false
    verbose: true                               # Show diff in commit message editor

  # Auto-fetch for team collaboration
  autoFetch: true
  autoRefresh: true
  fetchAll: false                               # Only fetch current remote

  # Push settings
  push:
    autoSetUpstream: true                       # Auto-setup upstream branches

  # Better diff algorithm for data files
  diffAlgorithm: 'histogram'                    # Better for structured data

  # Branch and log commands
  branchLogCmd: 'git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --'
  allBranchesLogCmd: 'git log --graph --all --color=always --abbrev-commit --decorate --date=relative --pretty=medium'

# OS integration (optimized for your Linux setup)
os:
  # Use delta for diffs (you already have it configured)
  diffCommand: 'delta --paging=never --line-numbers'

  # Editor settings (you use vim)
  editCommand: 'vim'
  editCommandTemplate: '{{editor}} +{{line}} {{filename}}'

  # File opening (Linux with xdg-open)
  openCommand: 'xdg-open {{filename}}'

  # Shell integration for your zsh functions
  shellFunctionsFile: '~/.config/zsh/aliases'   # Where your aliases live

# Custom commands for your data engineering workflow
customCommands:
  # Your existing gci function - the main integration!
  - key: 'C'
    command: 'zsh -c "source $DOTFILES/zsh/productivity/git-enhancements.sh && gci"'
    description: 'Interactive commit (your gci function)'
    context: 'files'
    loadingText: 'Opening interactive commit...'
    subprocess: true

  # Your existing gstds function
  - key: 'S'
    command: 'zsh -c "source $DOTFILES/zsh/productivity/git-enhancements.sh && gstds"'
    description: 'Data Science Git Status (your gstds)'
    context: 'global'
    loadingText: 'Loading DS status...'
    subprocess: true

  # DVC integration (if you use it)
  - key: 'ctrl+d'
    prompts:
      - type: 'menu'
        title: 'DVC Commands'
        options:
          - name: 'status'
            description: 'Check DVC status'
            value: 'dvc status'
          - name: 'push'
            description: 'Push data to remote'
            value: 'dvc push'
          - name: 'pull'
            description: 'Pull data from remote'
            value: 'dvc pull'
          - name: 'repro'
            description: 'Reproduce pipeline'
            value: 'dvc repro'
    command: '{{.Form.DvcCommand}}'
    context: 'global'
    description: 'DVC operations'
    loadingText: 'Running DVC command...'

  # Virtual environment info (using your setup)
  - key: 'ctrl+e'
    command: 'echo "üêç Virtual Env: ${VIRTUAL_ENV:+$(basename $VIRTUAL_ENV)}${CONDA_DEFAULT_ENV:+$CONDA_DEFAULT_ENV}" && echo "üìÅ Project: $(basename $PWD)" && echo "üå≥ Branch: $(git branch --show-current)"'
    description: 'Show environment & project info'
    context: 'global'
    subprocess: true

  # Clean notebooks (for your .ipynb files)
  - key: 'ctrl+n'
    command: 'find . -name "*.ipynb" -exec jupyter nbconvert --clear-output --inplace {} \; && echo "‚úÖ Cleaned notebook outputs"'
    description: 'Clean notebook outputs'
    context: 'global'
    confirm: true
    loadingText: 'Cleaning notebooks...'

  # Quick experiment branch (for your ML work)
  - key: 'ctrl+x'
    prompts:
      - type: 'input'
        title: 'Experiment name'
        initialValue: 'exp-'
    command: 'git checkout -b {{.Form.ExperimentName}} && echo "üß™ Created experiment branch: {{.Form.ExperimentName}}"'
    context: 'global'
    description: 'Create experiment branch'
    loadingText: 'Creating experiment...'

# Refresh settings optimized for team work
refresher:
  refreshInterval: 10                           # Refresh every 10 seconds
  fetchInterval: 60                             # Fetch every minute

# Disable quit confirmation (you're experienced)
confirmOnQuit: false
quitOnTopLevelReturn: false

# Key bindings - minimal changes, mostly using defaults
keybinding:
  universal:
    # Keep most defaults, just ensure these important ones
    quit: 'q'
    quit-alt1: '<c-c>'
    return: '<esc>'
    togglePanel: '<tab>'
    confirm: '<enter>'
    executeCustomCommand: ':'
    refresh: 'R'

  files:
    # Override default 'c' to use your gci function via 'C'
    commitChanges: 'c'                          # Keep lowercase for quick commits
    commitChangesWithEditor: 'C'                # Your custom gci function
    viewResetOptions: 'D'
    toggleStagedAll: 'a'
    refreshFiles: 'r'
    fetch: 'f'

# Performance settings
update:
  method: 'prompt'                              # Prompt for updates
  days: 14                                      # Check every 2 weeks
